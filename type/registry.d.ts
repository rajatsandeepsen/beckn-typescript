/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/lookup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Subscription"];
                };
            };
            responses: {
                default: components["responses"]["LookupResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscribe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Subscribe"];
                };
            };
            responses: {
                default: components["responses"]["SubscriptionResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/on_subscribe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["OnSubscribe"];
                };
            };
            responses: {
                default: components["responses"]["OnSubscribeResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Standard code representing the domain. The standard is usually published as part of the network policy. Furthermore, the network facilitator should also provide a mechanism to provide the supported domains of a network. */
        code: unknown;
        /** @description This object contains a url to a media file. */
        MediaFile: {
            /** @description indicates the nature and format of the document, file, or assortment of bytes. MIME types are defined and standardized in IETF's RFC 6838 */
            mimetype?: string;
            /**
             * Format: uri
             * @description The URL of the file
             */
            url?: string;
            /** @description The digital signature of the file signed by the sender */
            signature?: string;
            /** @description The signing algorithm used by the sender */
            dsa?: string;
        };
        /** @description Describes an image */
        Image: {
            /**
             * Format: uri
             * @description URL to the image. This can be a data url or an remote url
             */
            url?: string;
            /**
             * @description The size of the image. The network policy can define the default dimensions of each type
             * @enum {string}
             */
            size_type?: "xs" | "sm" | "md" | "lg" | "xl" | "custom";
            /** @description Width of the image in pixels */
            width?: string;
            /** @description Height of the image in pixels */
            height?: string;
        };
        /** @description Physical description of something. */
        Descriptor: {
            name?: string;
            code?: string;
            short_desc?: string;
            long_desc?: string;
            additional_desc?: {
                url?: string;
                /** @enum {string} */
                content_type?: "text/plain" | "text/html" | "application/json";
            };
            media?: components["schemas"]["MediaFile"][];
            images?: components["schemas"]["Image"][];
        };
        /** @description Describes a GPS coordinate */
        Gps: string;
        /** @description Describes a postal address. */
        Address: string;
        /** @description Describes a city */
        City: {
            /** @description Name of the city */
            name?: string;
            /** @description City code */
            code?: string;
        };
        /** @description A bounded geopolitical region of governance inside a country. */
        State: {
            /** @description Name of the state */
            name?: string;
            /** @description State code as per country or international standards */
            code?: string;
        };
        /** @description Describes a country */
        Country: {
            /** @description Name of the country */
            name?: string;
            /** @description Country code as per ISO 3166-1 and ISO 3166-2 format */
            code?: string;
        };
        /** @description Describes a numerical value in decimal form */
        DecimalValue: string;
        /** @description Describes a scalar */
        Scalar: {
            /** @enum {string} */
            type?: "CONSTANT" | "VARIABLE";
            value?: components["schemas"]["DecimalValue"];
            estimated_value?: components["schemas"]["DecimalValue"];
            computed_value?: components["schemas"]["DecimalValue"];
            range?: {
                min?: components["schemas"]["DecimalValue"];
                max?: components["schemas"]["DecimalValue"];
            };
            unit?: string;
        };
        /** @description Describes a circular region of a specified radius centered at a specified GPS coordinate. */
        Circle: {
            gps?: components["schemas"]["Gps"];
            radius?: components["schemas"]["Scalar"];
        };
        /** @description Rating value given to the object. This can be a single value or can also contain an inequality operator like gt, gte, lt, lte. This can also contain an inequality expression containing logical operators like && and ||. */
        value: string;
        /** @description The physical location of something */
        Location: {
            id?: string;
            descriptor?: components["schemas"]["Descriptor"];
            /**
             * Format: uri
             * @description The url to the map of the location. This can be a globally recognized map url or the one specified by the network policy.
             */
            map_url?: string;
            /** @description The GPS co-ordinates of this location. */
            gps?: components["schemas"]["Gps"];
            /** @description The address of this location. */
            address?: components["schemas"]["Address"];
            /** @description The city this location is, or is located within */
            city?: components["schemas"]["City"];
            /** @description The state this location is, or is located within */
            district?: string;
            /** @description The state this location is, or is located within */
            state?: components["schemas"]["State"];
            /** @description The country this location is, or is located within */
            country?: components["schemas"]["Country"];
            area_code?: string;
            circle?: components["schemas"]["Circle"];
            /** @description The boundary polygon of this location */
            polygon?: string;
            /** @description The three dimensional region describing this location */
            "3dspace"?: string;
            /** @description The rating of this location */
            rating?: components["schemas"]["value"];
        };
        /** @description A unique operational configuration of a trusted platform on a network. */
        Subscriber: {
            /** @description A globally unique identifier of the platform, Typically it is the fully qualified domain name (FQDN) of the platform. */
            subscriber_id?: string;
            /**
             * Format: uri
             * @description The callback URL of the Subscriber. This should necessarily contain the same domain name as set in `subscriber_id``.
             */
            url?: string;
            /**
             * @description The role of subscriber on the network
             * @enum {string}
             */
            type?: "BAP" | "BPP" | "BG";
            /** @description Operating industry domain that this subscriber offers its products or services in. A single subscriber can operate in multiple domains. Each operating domain must have a unique subscriber object entry in the req */
            domain?: components["schemas"]["code"];
            /** @description The region of operation of this subscriber */
            location?: components["schemas"]["Location"];
        };
        /** @description Subscription details of a Network Participant. */
        Subscription: components["schemas"]["Subscriber"] & {
            /**
             * Format: uuid
             * @description A unique ID of the subscription entry in a registry.
             */
            key_id?: string;
            /** @description The signing public key of the subscriber */
            signing_public_key?: string;
            /** @description The encryption public key of the subscriber */
            encr_public_key?: string;
            /**
             * Format: date-time
             * @description Date-time which the signing and encryption keys are valid from
             */
            valid_from?: string;
            /**
             * Format: date-time
             * @description Time till which the signing and encryption keys are valid
             */
            valid_until?: string;
            /**
             * @description Status of the subscription
             * @enum {string}
             */
            status?: "INITIATED" | "UNDER_SUBSCRIPTION" | "SUBSCRIBED" | "EXPIRED" | "UNSUBSCRIBED" | "INVALID_SSL";
            /** Format: date-time */
            created?: string;
            /** Format: date-time */
            updated?: string;
        };
        Subscribe: components["schemas"]["Subscription"] & {
            /**
             * Format: uuid
             * @description A randomly generated uuid nonce value
             */
            nonce?: string;
        };
        OnSubscribe: {
            /**
             * @description The current status of the Registrant
             * @enum {string}
             */
            status?: "INITIATED" | "UNDER_SUBSCRIPTION" | "SUBSCRIBED" | "INVALID_SSL" | "UNSUBSCRIBED";
            /** @description A random string generated by the registry encrypted with the subscriber's encryption public key */
            challenge: string;
        };
    };
    responses: {
        /** @description Array of subscribers matching the lookup request attributes */
        LookupResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Subscription"][];
            };
        };
        /** @description The Registry returns the status of the subscription request. */
        SubscriptionResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @enum {string} */
                    status?: "UNDER_SUBSCRIPTION";
                };
            };
        };
        /** @description Network Participant decrypts the challenge string using its private key and returns the decrypted value. */
        OnSubscribeResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @description Decrypted challenge string */
                    answer: string;
                };
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
