/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description BAP declares the customer's intent to buy/avail products or services */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Search"];
                };
            };
            responses: {
                default: components["responses"]["Response"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/select": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description BAP declares the customer's cart (or equivalent) created by selecting objects from the catalog */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Select"];
                };
            };
            responses: {
                default: components["responses"]["Response"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/init": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Initialize an order by providing billing and/or shipping details */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Init"];
                };
            };
            responses: {
                default: components["responses"]["Response"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Initialize an order by providing billing and/or shipping details */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Confirm"];
                };
            };
            responses: {
                default: components["responses"]["Response"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Fetch the latest order object */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            responses: {
                default: components["responses"]["Response"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/track": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Track an active order */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Track"];
                };
            };
            responses: {
                default: components["responses"]["Response"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Cancel an order */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Cancel"];
                };
            };
            responses: {
                default: components["responses"]["Response"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Remove object */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Update"];
                };
            };
            responses: {
                default: components["responses"]["Response"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rating": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Provide feedback on a service */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Rating-2"];
                };
            };
            responses: {
                default: components["responses"]["Response"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/support": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Contact support */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Support-2"];
                };
            };
            responses: {
                default: components["responses"]["Response"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/on_search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description BPP sends its catalog in response to a search request. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["OnSearch"];
                };
            };
            responses: {
                default: components["responses"]["Response"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/on_select": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Send draft order object with quoted price for selected items */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["OnSelect"];
                };
            };
            responses: {
                default: components["responses"]["Response"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/on_init": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Send order object with payment details updated */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["OnInit"];
                };
            };
            responses: {
                default: components["responses"]["Response"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/on_confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Send active order object */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["OnConfirm"];
                };
            };
            responses: {
                default: components["responses"]["Response"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/on_track": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Send tracking details of an active order */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["OnTrack"];
                };
            };
            responses: {
                default: components["responses"]["Response"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/on_cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Send cancellation request_id with reasons list in case of cancellation request. Else send cancelled order object */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["OnCancel"];
                };
            };
            responses: {
                default: components["responses"]["Response"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/on_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Returns updated service with updated runtime object */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["OnUpdate"];
                };
            };
            responses: {
                default: components["responses"]["Response"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/on_status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Fetch the status of a Service */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["OnStatus"];
                };
            };
            responses: {
                default: components["responses"]["Response"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/on_rating": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Provide feedback on a service */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["OnRating"];
                };
            };
            responses: {
                default: components["responses"]["Response"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/on_support": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Contact Support */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["OnSupport"];
                };
            };
            responses: {
                default: components["responses"]["Response"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Standard code representing the domain. The standard is usually published as part of the network policy. Furthermore, the network facilitator should also provide a mechanism to provide the supported domains of a network. */
        code: unknown;
        /** @description This object contains a url to a media file. */
        MediaFile: {
            /** @description indicates the nature and format of the document, file, or assortment of bytes. MIME types are defined and standardized in IETF's RFC 6838 */
            mimetype?: string;
            /**
             * Format: uri
             * @description The URL of the file
             */
            url?: string;
            /** @description The digital signature of the file signed by the sender */
            signature?: string;
            /** @description The signing algorithm used by the sender */
            dsa?: string;
        };
        /** @description Describes an image */
        Image: {
            /**
             * Format: uri
             * @description URL to the image. This can be a data url or an remote url
             */
            url?: string;
            /**
             * @description The size of the image. The network policy can define the default dimensions of each type
             * @enum {string}
             */
            size_type?: "xs" | "sm" | "md" | "lg" | "xl" | "custom";
            /** @description Width of the image in pixels */
            width?: string;
            /** @description Height of the image in pixels */
            height?: string;
        };
        /** @description Physical description of something. */
        Descriptor: {
            name?: string;
            code?: string;
            short_desc?: string;
            long_desc?: string;
            additional_desc?: {
                url?: string;
                /** @enum {string} */
                content_type?: "text/plain" | "text/html" | "application/json";
            };
            media?: components["schemas"]["MediaFile"][];
            images?: components["schemas"]["Image"][];
        };
        /** @description Describes a GPS coordinate */
        Gps: string;
        /** @description Describes a postal address. */
        Address: string;
        /** @description Describes a city */
        City: {
            /** @description Name of the city */
            name?: string;
            /** @description City code */
            code?: string;
        };
        /** @description A bounded geopolitical region of governance inside a country. */
        State: {
            /** @description Name of the state */
            name?: string;
            /** @description State code as per country or international standards */
            code?: string;
        };
        /** @description Describes a country */
        Country: {
            /** @description Name of the country */
            name?: string;
            /** @description Country code as per ISO 3166-1 and ISO 3166-2 format */
            code?: string;
        };
        /** @description Describes a numerical value in decimal form */
        DecimalValue: string;
        /** @description Describes a scalar */
        Scalar: {
            /** @enum {string} */
            type?: "CONSTANT" | "VARIABLE";
            value?: components["schemas"]["DecimalValue"];
            estimated_value?: components["schemas"]["DecimalValue"];
            computed_value?: components["schemas"]["DecimalValue"];
            range?: {
                min?: components["schemas"]["DecimalValue"];
                max?: components["schemas"]["DecimalValue"];
            };
            unit?: string;
        };
        /** @description Describes a circular region of a specified radius centered at a specified GPS coordinate. */
        Circle: {
            gps?: components["schemas"]["Gps"];
            radius?: components["schemas"]["Scalar"];
        };
        /** @description Rating value given to the object. This can be a single value or can also contain an inequality operator like gt, gte, lt, lte. This can also contain an inequality expression containing logical operators like && and ||. */
        value: string;
        /** @description The physical location of something */
        Location: {
            id?: string;
            descriptor?: components["schemas"]["Descriptor"];
            /**
             * Format: uri
             * @description The url to the map of the location. This can be a globally recognized map url or the one specified by the network policy.
             */
            map_url?: string;
            /** @description The GPS co-ordinates of this location. */
            gps?: components["schemas"]["Gps"];
            /** @description The address of this location. */
            address?: components["schemas"]["Address"];
            /** @description The city this location is, or is located within */
            city?: components["schemas"]["City"];
            /** @description The state this location is, or is located within */
            district?: string;
            /** @description The state this location is, or is located within */
            state?: components["schemas"]["State"];
            /** @description The country this location is, or is located within */
            country?: components["schemas"]["Country"];
            area_code?: string;
            circle?: components["schemas"]["Circle"];
            /** @description The boundary polygon of this location */
            polygon?: string;
            /** @description The three dimensional region describing this location */
            "3dspace"?: string;
            /** @description The rating of this location */
            rating?: components["schemas"]["value"];
        };
        /** @description A globally unique identifier of the platform, Typically it is the fully qualified domain name (FQDN) of the platform. */
        subscriber_id: string;
        /**
         * Format: uri
         * @description The callback URL of the Subscriber. This should necessarily contain the same domain name as set in `subscriber_id``.
         */
        url: string;
        /** @description Every API call in beckn protocol has a context. It provides a high-level overview to the receiver about the nature of the intended transaction. Typically, it is the BAP that sets the transaction context based on the consumer's location and action on their UI. But sometimes, during unsolicited callbacks, the BPP also sets the transaction context but it is usually the same as the context of a previous full-cycle, request-callback interaction between the BAP and the BPP. The context object contains four types of fields. <ol><li>Demographic information about the transaction using fields like `domain`, `country`, and `region`.</li><li>Addressing details like the sending and receiving platform's ID and API URL.</li><li>Interoperability information like the protocol version that implemented by the sender and,</li><li>Transaction details like the method being called at the receiver's endpoint, the transaction_id that represents an end-to-end user session at the BAP, a message ID to pair requests with callbacks, a timestamp to capture sending times, a ttl to specifiy the validity of the request, and a key to encrypt information if necessary.</li></ol> This object must be passed in every interaction between a BAP and a BPP. In HTTP/S implementations, it is not necessary to send the context during the synchronous response. However, in asynchronous protocols, the context must be sent during all interactions, */
        Context: {
            /** @description Domain code that is relevant to this transaction context */
            domain?: components["schemas"]["code"];
            /** @description The location where the transaction is intended to be fulfilled. */
            location?: components["schemas"]["Location"];
            /** @description The Beckn protocol method being called by the sender and executed at the receiver. */
            action?: string;
            /** @description Version of transaction protocol being used by the sender. */
            version?: string;
            /** @description Subscriber ID of the BAP */
            bap_id?: components["schemas"]["subscriber_id"];
            /** @description Subscriber URL of the BAP for accepting callbacks from BPPs. */
            bap_uri?: components["schemas"]["url"];
            /** @description Subscriber ID of the BPP */
            bpp_id?: components["schemas"]["subscriber_id"];
            /** @description Subscriber URL of the BPP for accepting calls from BAPs. */
            bpp_uri?: components["schemas"]["url"];
            /**
             * Format: uuid
             * @description This is a unique value which persists across all API calls from `search` through `confirm`. This is done to indicate an active user session across multiple requests. The BPPs can use this value to push personalized recommendations, and dynamic offerings related to an ongoing transaction despite being unaware of the user active on the BAP.
             */
            transaction_id?: string;
            /**
             * Format: uuid
             * @description This is a unique value which persists during a request / callback cycle. Since beckn protocol APIs are asynchronous, BAPs need a common value to match an incoming callback from a BPP to an earlier call. This value can also be used to ignore duplicate messages coming from the BPP. It is recommended to generate a fresh message_id for every new interaction. When sending unsolicited callbacks, BPPs must generate a new message_id.
             */
            message_id?: string;
            /**
             * Format: date-time
             * @description Time of request generation in RFC3339 format
             */
            timestamp?: string;
            /** @description The encryption public key of the sender */
            key?: string;
            /** @description The duration in ISO8601 format after timestamp for which this message holds valid */
            ttl?: string;
        };
        /** @description Describes duration as per ISO8601 format */
        Duration: string;
        /** @description Describes schedule as a repeating time period used to describe a regularly recurring event. At a minimum a schedule will specify frequency which describes the interval between occurrences of the event. Additional information can be provided to specify the schedule more precisely. This includes identifying the timestamps(s) of when the event will take place. Schedules may also have holidays to exclude a specific day from the schedule.<br>This has properties like frequency, holidays, times */
        Schedule: {
            frequency?: components["schemas"]["Duration"];
            holidays?: string[];
            times?: string[];
        };
        /** @description Describes time in its various forms. It can be a single point in time; duration; or a structured timetable of operations<br>This has properties like label, time stamp,duration,range, days, schedule */
        Time: {
            label?: string;
            /** Format: date-time */
            timestamp?: string;
            duration?: components["schemas"]["Duration"];
            range?: {
                /** Format: date-time */
                start?: string;
                /** Format: date-time */
                end?: string;
            };
            /** @description comma separated values representing days of the week */
            days?: string;
            schedule?: components["schemas"]["Schedule"];
        };
        /** @description ID of the category */
        id: string;
        /** @description Describes a tag. This is used to contain extended metadata. This object can be added as a property to any schema to describe extended attributes. For BAPs, tags can be sent during search to optimize and filter search results. BPPs can use tags to index their catalog to allow better search functionality. Tags are sent by the BPP as part of the catalog response in the `on_search` callback. Tags are also meant for display purposes. Upon receiving a tag, BAPs are meant to render them as name-value pairs. This is particularly useful when rendering tabular information about a product or service. */
        Tag: {
            /** @description Description of the Tag, can be used to store detailed information. */
            descriptor?: components["schemas"]["Descriptor"];
            /** @description The value of the tag. This set by the BPP and rendered as-is by the BAP. */
            value?: string;
            /** @description This value indicates if the tag is intended for display purposes. If set to `true`, then this tag must be displayed. If it is set to `false`, it should not be displayed. This value can override the group display value. */
            display?: boolean;
        };
        /** @description A collection of tag objects with group level attributes. For detailed documentation on the Tags and Tag Groups schema go to https://github.com/beckn/protocol-specifications/discussions/316 */
        TagGroup: {
            /**
             * @description Indicates the display properties of the tag group. If display is set to false, then the group will not be displayed. If it is set to true, it should be displayed. However, group-level display properties can be overriden by individual tag-level display property. As this schema is purely for catalog display purposes, it is not recommended to send this value during search.
             * @default true
             */
            display: boolean;
            /** @description Description of the TagGroup, can be used to store detailed information. */
            descriptor?: components["schemas"]["Descriptor"];
            /** @description An array of Tag objects listed under this group. This property can be set by BAPs during search to narrow the `search` and achieve more relevant results. When received during `on_search`, BAPs must render this list under the heading described by the `name` property of this schema. */
            list?: components["schemas"]["Tag"][];
        };
        /** @description A label under which a collection of items can be grouped. */
        Category: {
            /** @description ID of the category */
            id?: string;
            parent_category_id?: components["schemas"]["id"];
            descriptor?: components["schemas"]["Descriptor"];
            time?: components["schemas"]["Time"];
            /** @description Time to live for an instance of this schema */
            ttl?: unknown;
            tags?: components["schemas"]["TagGroup"][];
        };
        /** @description Describes the state of fulfillment */
        FulfillmentState: {
            descriptor?: components["schemas"]["Descriptor"];
            /** Format: date-time */
            updated_at?: string;
            /** @description ID of entity which changed the state */
            updated_by?: string;
        };
        /** @description Describes a credential of an entity - Person or Organization */
        Credential: {
            id?: string;
            /** @default VerifiableCredential */
            type: string;
            /**
             * Format: uri
             * @description URL of the credential
             */
            url?: string;
        };
        /** @description Describes a language known to the person. */
        Language: {
            code?: string;
            name?: string;
        };
        /** @description Describes a skill of the person. */
        Skill: {
            code?: string;
            name?: string;
        };
        /** @description Describes a person as any individual */
        Person: {
            /** @description Describes the identity of the person */
            id?: string;
            /**
             * Format: uri
             * @description Profile url of the person
             */
            url?: string;
            /** @description the name of the person */
            name?: string;
            image?: components["schemas"]["Image"];
            /** @description Age of the person */
            age?: components["schemas"]["Duration"];
            /**
             * Format: date
             * @description Date of birth of the person
             */
            dob?: string;
            /** @description Gender of something, typically a Person, but possibly also fictional characters, animals, etc. While Male and Female may be used, text strings are also acceptable for people who do not identify as a binary gender.Allowed values for this field can be published in the network policy */
            gender?: string;
            creds?: components["schemas"]["Credential"][];
            languages?: components["schemas"]["Language"][];
            skills?: components["schemas"]["Skill"][];
            tags?: components["schemas"]["TagGroup"][];
        };
        /** @description Describes the contact information of an entity */
        Contact: {
            phone?: string;
            email?: string;
            /** @description A Jcard object as per draft-ietf-jcardcal-jcard-03 specification */
            jcard?: Record<string, never>;
        };
        /** @description Describes a customer buying/availing a product or a service */
        Customer: {
            person?: components["schemas"]["Person"];
            contact?: components["schemas"]["Contact"];
        };
        /** @description An organization. Usually a recognized business entity. */
        Organization: {
            descriptor?: components["schemas"]["Descriptor"];
            /** @description The postal address of the organization */
            address?: components["schemas"]["Address"];
            /** @description The state where the organization's address is registered */
            state?: components["schemas"]["State"];
            /** @description The city where the the organization's address is registered */
            city?: components["schemas"]["City"];
            contact?: components["schemas"]["Contact"];
        };
        /** @description Describes the direct performer, driver or executor that fulfills an order. It is usually a person. But in some rare cases, it could be a non-living entity like a drone, or a bot. Some examples of agents are Doctor in the healthcare sector, a driver in the mobility sector, or a delivery person in the logistics sector. This object can be set at any stage of the order lifecycle. This can be set at the discovery stage when the BPP wants to provide details on the agent fulfilling the order, like in healthcare, where the doctor's name appears during search. This object can also used to search for a particular person that the customer wants fulfilling an order. Sometimes, this object gets instantiated after the order is confirmed, like in the case of on-demand taxis, where the driver is assigned after the user confirms the ride. */
        Agent: {
            person?: components["schemas"]["Person"];
            contact?: components["schemas"]["Contact"];
            organization?: components["schemas"]["Organization"];
            rating?: components["schemas"]["value"];
        };
        /** @description Describes a vehicle is a device that is designed or used to transport people or cargo over land, water, air, or through space.<br>This has properties like category, capacity, make, model, size,variant,color,energy_type,registration */
        Vehicle: {
            category?: string;
            capacity?: number;
            make?: string;
            model?: string;
            size?: string;
            variant?: string;
            color?: string;
            energy_type?: string;
            registration?: string;
            wheels_count?: string;
            cargo_volumne?: string;
            wheelchair_access?: string;
            code?: string;
            emission_standard?: string;
        };
        /** @description Describes an authorization mechanism used to start or end the fulfillment of an order. For example, in the mobility sector, the driver may require a one-time password to initiate the ride. In the healthcare sector, a patient may need to provide a password to open a video conference link during a teleconsultation. */
        Authorization: {
            /** @description Type of authorization mechanism used. The allowed values for this field can be published as part of the network policy. */
            type?: string;
            /** @description Token used for authorization. This is typically generated at the BPP. The BAP can send this value to the user via any channel that it uses to authenticate the user like SMS, Email, Push notification, or in-app rendering. */
            token?: string;
            /**
             * Format: date-time
             * @description Timestamp in RFC3339 format from which token is valid
             */
            valid_from?: string;
            /**
             * Format: date-time
             * @description Timestamp in RFC3339 format until which token is valid
             */
            valid_to?: string;
            /** @description Status of the token */
            status?: string;
        };
        /** @description A logical point in space and time during the fulfillment of an order. */
        Stop: {
            id?: string;
            parent_stop_id?: string;
            /** @description Location of the stop */
            location?: components["schemas"]["Location"];
            /** @description The type of stop. Allowed values of this property can be defined by the network policy. */
            type?: string;
            /** @description Timings applicable at the stop. */
            time?: components["schemas"]["Time"];
            /** @description Instructions that need to be followed at the stop */
            instructions?: components["schemas"]["Descriptor"];
            /** @description Contact details of the stop */
            contact?: components["schemas"]["Contact"];
            /** @description The details of the person present at the stop */
            person?: components["schemas"]["Person"];
            authorization?: components["schemas"]["Authorization"];
        };
        /** @description Describes how a an order will be rendered/fulfilled to the end-customer */
        Fulfillment: {
            /** @description Unique reference ID to the fulfillment of an order */
            id?: string;
            /** @description A code that describes the mode of fulfillment. This is typically set when there are multiple ways an order can be fulfilled. For example, a retail order can be fulfilled either via store pickup or a home delivery. Similarly, a medical consultation can be provided either in-person or via tele-consultation. The network policy must publish standard fulfillment type codes for the different modes of fulfillment. */
            type?: string;
            /** @description Whether the fulfillment can be rated or not */
            rateable?: boolean;
            /** @description The rating value of the fulfullment service. */
            rating?: components["schemas"]["value"];
            /** @description The current state of fulfillment. The BPP must set this value whenever the state of the order fulfillment changes and fire an unsolicited `on_status` call. */
            state?: components["schemas"]["FulfillmentState"];
            /**
             * @description Indicates whether the fulfillment allows tracking
             * @default false
             */
            tracking: boolean;
            /** @description The person that will ultimately receive the order */
            customer?: components["schemas"]["Customer"];
            /** @description The agent that is currently handling the fulfillment of the order */
            agent?: components["schemas"]["Agent"];
            contact?: components["schemas"]["Contact"];
            vehicle?: components["schemas"]["Vehicle"];
            /** @description The list of logical stops encountered during the fulfillment of an order. */
            stops?: components["schemas"]["Stop"][];
            /** @description The physical path taken by the agent that can be rendered on a map. The allowed format of this property can be set by the network. */
            path?: string;
            tags?: components["schemas"]["TagGroup"][];
        };
        /** @description Describes the terms of settlement between the BAP and the BPP for a single transaction. When instantiated, this object contains <ol><li>the amount that has to be settled,</li><li>The payment destination destination details</li><li>When the settlement should happen, and</li><li>A transaction reference ID</li></ol>. During a transaction, the BPP reserves the right to decide the terms of payment. However, the BAP can send its terms to the BPP first. If the BPP does not agree to those terms, it must overwrite the terms and return them to the BAP. If overridden, the BAP must either agree to the terms sent by the BPP in order to preserve the provider's autonomy, or abort the transaction. In case of such disagreements, the BAP and the BPP can perform offline negotiations on the payment terms. Once an agreement is reached, the BAP and BPP can resume transactions. */
        Payment: {
            /** @description ID of the payment term that can be referred at an item or an order level in a catalog */
            id?: string;
            /** @description This field indicates who is the collector of payment. The BAP can set this value to 'bap' if it wants to collect the payment first and  settle it to the BPP. If the BPP agrees to those terms, the BPP should not send the payment url. Alternatively, the BPP can set this field with the value 'bpp' if it wants the payment to be made directly. */
            collected_by?: unknown;
            /**
             * Format: uri
             * @description A payment url to be called by the BAP. If empty, then the payment is to be done offline. The details of payment should be present in the params object. If tl_method = http/get, then the payment details will be sent as url params. Two url param values, ```$transaction_id``` and ```$amount``` are mandatory.
             */
            url?: string;
            params?: {
                /** @description The reference transaction ID associated with a payment activity */
                transaction_id?: string;
                amount?: string;
                currency?: string;
                bank_code?: string;
                bank_account_number?: string;
                virtual_payment_address?: string;
                source_bank_code?: string;
                source_bank_account_number?: string;
                source_virtual_payment_address?: string;
            };
            /** @enum {string} */
            type?: "PRE-ORDER" | "PRE-FULFILLMENT" | "ON-FULFILLMENT" | "POST-FULFILLMENT";
            /** @enum {string} */
            status?: "PAID" | "NOT-PAID";
            time?: components["schemas"]["Time"];
            tags?: components["schemas"]["TagGroup"][];
        };
        "properties-id": string;
        /** @description ID of the item. */
        "Item_properties-id": string;
        /** @description An offer associated with a catalog. This is typically used to promote a particular product and enable more purchases. */
        Offer: {
            id?: string;
            descriptor?: components["schemas"]["Descriptor"];
            location_ids?: components["schemas"]["properties-id"][];
            category_ids?: components["schemas"]["id"][];
            item_ids?: components["schemas"]["Item_properties-id"][];
            time?: components["schemas"]["Time"];
            tags?: components["schemas"]["TagGroup"][];
        };
        /** @description Describes the count or amount of an item */
        ItemQuantity: {
            /** @description This represents the exact quantity allocated for purchase of the item. */
            allocated?: {
                count?: number;
                measure?: components["schemas"]["Scalar"];
            };
            /** @description This represents the exact quantity available for purchase of the item. The buyer can only purchase multiples of this */
            available?: {
                count?: number;
                measure?: components["schemas"]["Scalar"];
            };
            /** @description This represents the maximum quantity allowed for purchase of the item */
            maximum?: {
                count?: number;
                measure?: components["schemas"]["Scalar"];
            };
            /** @description This represents the minimum quantity allowed for purchase of the item */
            minimum?: {
                count?: number;
                measure?: components["schemas"]["Scalar"];
            };
            /** @description This represents the quantity selected for purchase of the item */
            selected?: {
                count?: number;
                measure?: components["schemas"]["Scalar"];
            };
            /** @description This represents the quantity available in a single unit of the item */
            unitized?: {
                count?: number;
                measure?: components["schemas"]["Scalar"];
            };
        };
        /** @description Describes the price of a product or service */
        Price: {
            currency?: string;
            value?: components["schemas"]["DecimalValue"];
            estimated_value?: components["schemas"]["DecimalValue"];
            computed_value?: components["schemas"]["DecimalValue"];
            listed_value?: components["schemas"]["DecimalValue"];
            offered_value?: components["schemas"]["DecimalValue"];
            minimum_value?: components["schemas"]["DecimalValue"];
            maximum_value?: components["schemas"]["DecimalValue"];
        };
        /** @description Unique reference ID to the fulfillment of an order */
        "Fulfillment_properties-id": string;
        /** @description ID of the payment term that can be referred at an item or an order level in a catalog */
        "Payment_properties-id": string;
        /** @description Describes an additional item offered as a value-addition to a product or service. This does not exist independently in a catalog and is always associated with an item. */
        AddOn: {
            /** @description Provider-defined ID of the add-on */
            id?: string;
            descriptor?: components["schemas"]["Descriptor"];
            price?: components["schemas"]["Price"];
        };
        /** @description A fee applied on a particular entity */
        Fee: {
            /** @description Percentage of a value */
            percentage?: components["schemas"]["DecimalValue"];
            /** @description A fixed value */
            amount?: components["schemas"]["Price"];
        };
        /** @description Describes a form */
        Form: {
            /**
             * Format: uri
             * @description The URL from where the form can be fetched. The content fetched from the url must be processed as per the mime_type specified in this object. Once fetched, the rendering platform can choosed to render the form as-is as an embeddable element; or process it further to blend with the theme of the application. In case the interface is non-visual, the the render can process the form data and reproduce it as per the standard specified in the form.
             */
            url?: string;
            /** @description The form submission data */
            data?: {
                [key: string]: string;
            };
            /**
             * @description This field indicates the nature and format of the form received by querying the url. MIME types are defined and standardized in IETF's RFC 6838.
             * @enum {string}
             */
            mime_type?: "text/html" | "application/xml";
            /** Format: uuid */
            submission_id?: string;
        };
        /** @description Contains any additional or extended inputs required to confirm an order. This is typically a Form Input. Sometimes, selection of catalog elements is not enough for the BPP to confirm an order. For example, to confirm a flight ticket, the airline requires details of the passengers along with information on baggage, identity, in addition to the class of ticket. Similarly, a logistics company may require details on the nature of shipment in order to confirm the shipping. A recruiting firm may require additional details on the applicant in order to confirm a job application. For all such purposes, the BPP can choose to send this object attached to any object in the catalog that is required to be sent while placing the order. This object can typically be sent at an item level or at the order level. The item level XInput will override the Order level XInput as it indicates a special requirement of information for that particular item. Hence the BAP must render a separate form for the Item and another form at the Order level before confirmation. */
        XInput: {
            form?: components["schemas"]["Form"];
            /** @description Indicates whether the form data is mandatorily required by the BPP to confirm the order. */
            required?: boolean;
        };
        /** @description Describes the cancellation terms of an item or an order. This can be referenced at an item or order level. Item-level cancellation terms can override the terms at the order level. */
        CancellationTerm: {
            /** @description The state of fulfillment during which this term is applicable. */
            fulfillment_state?: components["schemas"]["FulfillmentState"];
            /** @description Indicates whether a reason is required to cancel the order */
            reason_required?: boolean;
            /** @description Information related to the time of cancellation. */
            cancel_by?: components["schemas"]["Time"];
            cancellation_fee?: components["schemas"]["Fee"];
            xinput?: components["schemas"]["XInput"];
            external_ref?: components["schemas"]["MediaFile"];
        };
        /** @description Refund term of an item or an order */
        RefundTerm: {
            /** @description The state of fulfillment during which this term is applicable. */
            fulfillment_state?: components["schemas"]["State"];
            /** @description Indicates if cancellation will result in a refund */
            refund_eligible?: boolean;
            /** @description Time within which refund will be processed after successful cancellation. */
            refund_within?: components["schemas"]["Time"];
            refund_amount?: components["schemas"]["Price"];
        };
        /** @description The replacement policy of an item or an order */
        ReplacementTerm: {
            /** @description The state of fulfillment during which this term is applicable. */
            fulfillment_state?: components["schemas"]["State"];
            /** @description Applicable only for buyer managed returns where the buyer has to replace the item before a certain date-time, failing which they will not be eligible for replacement */
            replace_within?: components["schemas"]["Time"];
            external_ref?: components["schemas"]["MediaFile"];
        };
        /** @description Describes the return policy of an item or an order */
        ReturnTerm: {
            /** @description The state of fulfillment during which this term IETF''s applicable. */
            fulfillment_state?: components["schemas"]["State"];
            /** @description Indicates whether the item is eligible for return */
            return_eligible?: boolean;
            /** @description Applicable only for buyer managed returns where the buyer has to return the item to the origin before a certain date-time, failing which they will not be eligible for refund. */
            return_time?: components["schemas"]["Time"];
            /** @description The location where the item or order must / will be returned to */
            return_location?: components["schemas"]["Location"];
            /**
             * @description The entity that will perform the return
             * @enum {string}
             */
            fulfillment_managed_by?: "CONSUMER" | "PROVIDER";
        };
        /** @description Describes a product or a service offered to the end consumer by the provider. In the mobility sector, it can represent a fare product like one way journey. In the logistics sector, it can represent the delivery service offering. In the retail domain it can represent a product like a grocery item. */
        Item: {
            /** @description ID of the item. */
            id?: string;
            /** @description ID of the item, this item is a variant of */
            parent_item_id?: components["schemas"]["Item_properties-id"];
            /** @description The number of units of the parent item this item is a multiple of */
            parent_item_quantity?: components["schemas"]["ItemQuantity"];
            /** @description Physical description of the item */
            descriptor?: components["schemas"]["Descriptor"];
            /** @description The creator of this item */
            creator?: components["schemas"]["Organization"];
            /** @description The price of this item, if it has intrinsic value */
            price?: components["schemas"]["Price"];
            /** @description The selling quantity of the item */
            quantity?: components["schemas"]["ItemQuantity"];
            /** @description Categories this item can be listed under */
            category_ids?: components["schemas"]["id"][];
            /** @description Modes through which this item can be fulfilled */
            fulfillment_ids?: components["schemas"]["Fulfillment_properties-id"][];
            /** @description Provider Locations this item is available in */
            location_ids?: components["schemas"]["properties-id"][];
            /** @description Payment modalities through which this item can be ordered */
            payment_ids?: components["schemas"]["Payment_properties-id"][];
            add_ons?: components["schemas"]["AddOn"][];
            /** @description Cancellation terms of this item */
            cancellation_terms?: components["schemas"]["CancellationTerm"][];
            /** @description Refund terms of this item */
            refund_terms?: components["schemas"]["RefundTerm"][];
            /** @description Terms that are applicable be met when this item is replaced */
            replacement_terms?: components["schemas"]["ReplacementTerm"][];
            /** @description Terms that are applicable when this item is returned */
            return_terms?: components["schemas"]["ReturnTerm"][];
            /** @description Additional input required from the customer to purchase / avail this item */
            xinput?: components["schemas"]["XInput"];
            /** @description Temporal attributes of this item. This property is used when the item exists on the catalog only for a limited period of time. */
            time?: components["schemas"]["Time"];
            /** @description Whether this item can be rated */
            rateable?: boolean;
            /** @description The rating of the item */
            rating?: components["schemas"]["value"];
            /** @description Whether this item is an exact match of the request */
            matched?: boolean;
            /** @description Whether this item is a related item to the exactly matched item */
            related?: boolean;
            /** @description Whether this item is a recommended item to a response */
            recommended?: boolean;
            /** @description Time to live in seconds for an instance of this schema */
            ttl?: string;
            tags?: components["schemas"]["TagGroup"][];
        };
        /** @description Describes the catalog of a business. */
        Provider: {
            /** @description Id of the provider */
            id?: string;
            descriptor?: components["schemas"]["Descriptor"];
            /** @description Category Id of the provider at the BPP-level catalog */
            category_id?: string;
            rating?: components["schemas"]["value"];
            time?: components["schemas"]["Time"];
            categories?: components["schemas"]["Category"][];
            fulfillments?: components["schemas"]["Fulfillment"][];
            payments?: components["schemas"]["Payment"][];
            locations?: components["schemas"]["Location"][];
            offers?: components["schemas"]["Offer"][];
            items?: components["schemas"]["Item"][];
            /**
             * Format: date-time
             * @description Time after which catalog has to be refreshed
             */
            exp?: string;
            /** @description Whether this provider can be rated or not */
            rateable?: boolean;
            /** @description The time-to-live in seconds, for this object. This can be overriden at deeper levels. A value of -1 indicates that this object is not cacheable. */
            ttl?: number;
            tags?: components["schemas"]["TagGroup"][];
        };
        /** @description The intent to buy or avail a product or a service. The BAP can declare the intent of the consumer containing <ul><li>What they want (A product, service, offer)</li><li>Who they want (A seller, service provider, agent etc)</li><li>Where they want it and where they want it from</li><li>When they want it (start and end time of fulfillment</li><li>How they want to pay for it</li></ul><br>This has properties like descriptor,provider,fulfillment,payment,category,offer,item,tags<br>This is typically used by the BAP to send the purpose of the user's search to the BPP. This will be used by the BPP to find products or services it offers that may match the user's intent.<br>For example, in Mobility, the mobility consumer declares a mobility intent. In this case, the mobility consumer declares information that describes various aspects of their journey like,<ul><li>Where would they like to begin their journey (intent.fulfillment.start.location)</li><li>Where would they like to end their journey (intent.fulfillment.end.location)</li><li>When would they like to begin their journey (intent.fulfillment.start.time)</li><li>When would they like to end their journey (intent.fulfillment.end.time)</li><li>Who is the transport service provider they would like to avail services from (intent.provider)</li><li>Who is traveling (This is not recommended in public networks) (intent.fulfillment.customer)</li><li>What kind of fare product would they like to purchase (intent.item)</li><li>What add-on services would they like to avail</li><li>What offers would they like to apply on their booking (intent.offer)</li><li>What category of services would they like to avail (intent.category)</li><li>What additional luggage are they carrying</li><li>How would they like to pay for their journey (intent.payment)</li></ul><br>For example, in health domain, a consumer declares the intent for a lab booking the describes various aspects of their booking like,<ul><li>Where would they like to get their scan/test done (intent.fulfillment.start.location)</li><li>When would they like to get their scan/test done (intent.fulfillment.start.time)</li><li>When would they like to get the results of their test/scan (intent.fulfillment.end.time)</li><li>Who is the service provider they would like to avail services from (intent.provider)</li><li>Who is getting the test/scan (intent.fulfillment.customer)</li><li>What kind of test/scan would they like to purchase (intent.item)</li><li>What category of services would they like to avail (intent.category)</li><li>How would they like to pay for their journey (intent.payment)</li></ul> */
        Intent: {
            /** @description A raw description of the search intent. Free text search strings, raw audio, etc can be sent in this object. */
            descriptor?: components["schemas"]["Descriptor"];
            /** @description The provider from which the customer wants to place to the order from */
            provider?: components["schemas"]["Provider"];
            /** @description Details on how the customer wants their order fulfilled */
            fulfillment?: components["schemas"]["Fulfillment"];
            /** @description Details on how the customer wants to pay for the order */
            payment?: components["schemas"]["Payment"];
            /** @description Details on the item category */
            category?: components["schemas"]["Category"];
            /** @description details on the offer the customer wants to avail */
            offer?: components["schemas"]["Offer"];
            /** @description Details of the item that the consumer wants to order */
            item?: components["schemas"]["Item"];
            tags?: components["schemas"]["TagGroup"][];
        };
        Search: {
            context: components["schemas"]["Context"] & {
                /** @enum {unknown} */
                action?: "search";
            };
            message: {
                intent?: components["schemas"]["Intent"];
            };
        };
        /** @description Describes the acknowledgement sent in response to an API call. If the implementation uses HTTP/S, then Ack must be returned in the same session. Every API call to a BPP must be responded to with an Ack whether the BPP intends to respond with a callback or not. This has one property called `status` that indicates the status of the Acknowledgement. */
        Ack: {
            /**
             * @description The status of the acknowledgement. If the request passes the validation criteria of the BPP, then this is set to ACK. If a BPP responds with status = `ACK` to a request, it is required to respond with a callback. If the request fails the validation criteria, then this is set to NACK. Additionally, if a BPP does not intend to respond with a callback even after the request meets the validation criteria, it should set this value to `NACK`.
             * @enum {string}
             */
            status?: "ACK" | "NACK";
            /** @description A list of tags containing any additional information sent along with the Acknowledgement. */
            tags?: components["schemas"]["TagGroup"][];
        };
        /** @description Describes an error object that is returned by a BAP, BPP or BG as a response or callback to an action by another network participant. This object is sent when any request received by a network participant is unacceptable. This object can be sent either during Ack or with the callback. */
        Error: {
            /** @description Standard error code. For full list of error codes, refer to docs/protocol-drafts/BECKN-005-ERROR-CODES-DRAFT-01.md of this repo" */
            code?: string;
            /** @description Path to json schema generating the error. Used only during json schema validation errors */
            paths?: string;
            /** @description Human readable message describing the error. Used mainly for logging. Not recommended to be shown to the user. */
            message?: string;
        };
        /** @description Describes the billing details of an entity.<br>This has properties like name,organization,address,email,phone,time,tax_number, created_at,updated_at */
        Billing: {
            /** @description Name of the billable entity */
            name?: string;
            /** @description Details of the organization being billed. */
            organization?: components["schemas"]["Organization"];
            /** @description The address of the billable entity */
            address?: components["schemas"]["Address"];
            /** @description The state where the billable entity resides. This is important for state-level tax calculation */
            state?: components["schemas"]["State"];
            /** @description The city where the billable entity resides. */
            city?: components["schemas"]["City"];
            /**
             * Format: email
             * @description Email address where the bill is sent to
             */
            email?: string;
            /** @description Phone number of the billable entity */
            phone?: string;
            /** @description Details regarding the billing period */
            time?: components["schemas"]["Time"];
            /** @description ID of the billable entity as recognized by the taxation authority */
            tax_id?: string;
        };
        /** @description Describes a selectable option */
        Option: {
            id?: string;
            descriptor?: components["schemas"]["Descriptor"];
        };
        /** @description Describes a cancellation event */
        Cancellation: {
            /**
             * Format: date-time
             * @description Date-time when the order was cancelled by the buyer
             */
            time?: string;
            /** @enum {string} */
            cancelled_by?: "CONSUMER" | "PROVIDER";
            /** @description The reason for cancellation */
            reason?: components["schemas"]["Option"];
            /** @description Any additional information regarding the nature of cancellation */
            additional_description?: components["schemas"]["Descriptor"];
        };
        /** @description Describes a quote. It is the estimated price of products or services from the BPP.<br>This has properties like price, breakup, ttl */
        Quotation: {
            /**
             * Format: uuid
             * @description ID of the quote.
             */
            id?: string;
            /** @description The total quoted price */
            price?: components["schemas"]["Price"];
            /** @description the breakup of the total quoted price */
            breakup?: {
                item?: components["schemas"]["Item"];
                title?: string;
                price?: components["schemas"]["Price"];
            }[];
            ttl?: components["schemas"]["Duration"];
        };
        /** @description Describes a legal purchase order. It contains the complete details of the legal contract created between the buyer and the seller. */
        Order: {
            /** @description Human-readable ID of the order. This is generated at the BPP layer. The BPP can either generate order id within its system or forward the order ID created at the provider level. */
            id?: string;
            /** @description A list of order IDs to link this order to previous orders. */
            ref_order_ids?: string[];
            /**
             * @description Status of the order. Allowed values can be defined by the network policy
             * @enum {string}
             */
            status?: "ACTIVE" | "COMPLETE" | "CANCELLED";
            /**
             * @description This is used to indicate the type of order being created to BPPs. Sometimes orders can be linked to previous orders, like a replacement order in a retail domain. A follow-up consultation in healthcare domain. A single order part of a subscription order. The list of order types can be standardized at the network level.
             * @default DEFAULT
             * @enum {string}
             */
            type: "DRAFT" | "DEFAULT";
            /** @description Details of the provider whose catalog items have been selected. */
            provider?: components["schemas"]["Provider"];
            /** @description The items purchased / availed in this order */
            items?: components["schemas"]["Item"][];
            /** @description The add-ons purchased / availed in this order */
            add_ons?: components["schemas"]["AddOn"][];
            /** @description The offers applied in this order */
            offers?: components["schemas"]["Offer"][];
            /** @description The billing details of this order */
            billing?: components["schemas"]["Billing"];
            /** @description The fulfillments involved in completing this order */
            fulfillments?: components["schemas"]["Fulfillment"][];
            /** @description The cancellation details of this order */
            cancellation?: components["schemas"]["Cancellation"];
            /** @description Cancellation terms of this item */
            cancellation_terms?: components["schemas"]["CancellationTerm"][];
            /** @description Refund terms of this item */
            refund_terms?: components["schemas"]["RefundTerm"][];
            /** @description Replacement terms of this item */
            replacement_terms?: components["schemas"]["ReplacementTerm"][];
            /** @description Return terms of this item */
            return_terms?: components["schemas"]["ReturnTerm"][];
            /** @description The mutually agreed upon quotation for this order. */
            quote?: components["schemas"]["Quotation"];
            /** @description The terms of settlement for this order */
            payments?: components["schemas"]["Payment"][];
            /**
             * Format: date-time
             * @description The date-time of creation of this order
             */
            created_at?: string;
            /**
             * Format: date-time
             * @description The date-time of updated of this order
             */
            updated_at?: string;
            /** @description Additional input required from the customer to confirm this order */
            xinput?: components["schemas"]["XInput"];
            tags?: components["schemas"]["TagGroup"][];
        };
        Select: {
            context: components["schemas"]["Context"] & {
                /** @enum {unknown} */
                action: "select";
            };
            message: {
                order: components["schemas"]["Order"];
            };
        };
        Init: {
            context: components["schemas"]["Context"] & {
                /** @enum {unknown} */
                action: "init";
            };
            message: {
                order: components["schemas"]["Order"];
            };
        };
        Confirm: {
            context: components["schemas"]["Context"] & {
                /** @enum {unknown} */
                action: "confirm";
            };
            message: {
                order: components["schemas"]["Order"];
            };
        };
        /** @description Human-readable ID of the order. This is generated at the BPP layer. The BPP can either generate order id within its system or forward the order ID created at the provider level. */
        "Order_properties-id": string;
        Status: {
            context: components["schemas"]["Context"] & {
                /** @enum {unknown} */
                action: "status";
            };
            message: {
                order_id: components["schemas"]["Order_properties-id"];
            };
        };
        Track: {
            context: components["schemas"]["Context"] & {
                /** @enum {unknown} */
                action: "track";
            };
            message: {
                order_id: components["schemas"]["Order_properties-id"];
                /** Format: uri */
                callback_url?: string;
            };
        };
        Cancel: {
            context: components["schemas"]["Context"] & {
                /** @enum {unknown} */
                action: "cancel";
            };
            message: {
                order_id: components["schemas"]["Order_properties-id"];
                cancellation_reason_id?: components["schemas"]["properties-id"];
                descriptor?: components["schemas"]["Descriptor"];
            };
        };
        Update: {
            context: components["schemas"]["Context"] & {
                /** @enum {unknown} */
                action: "update";
            };
            message: {
                /** @description Comma separated values of order objects being updated. For example: ```"update_target":"item,billing,fulfillment"``` */
                update_target: string;
                /** @description Updated order object */
                order: components["schemas"]["Order"];
            };
        };
        /** @description Describes the rating of an entity */
        Rating: {
            /**
             * @description Category of the entity being rated
             * @enum {string}
             */
            rating_category?: "Item" | "Order" | "Fulfillment" | "Provider" | "Agent" | "Support";
            /** @description Id of the object being rated */
            id?: string;
            /** @description Rating value given to the object. This can be a single value or can also contain an inequality operator like gt, gte, lt, lte. This can also contain an inequality expression containing logical operators like && and ||. */
            value?: string;
        };
        "Rating-2": {
            context: components["schemas"]["Context"] & {
                /** @enum {unknown} */
                action: "rating";
            };
            message: {
                ratings?: components["schemas"]["Rating"][];
            };
        };
        /** @description Details of customer support */
        Support: {
            ref_id?: string;
            /** Format: phone */
            callback_phone?: string;
            /** Format: phone */
            phone?: string;
            /** Format: email */
            email?: string;
            /** Format: uri */
            url?: string;
        };
        "Support-2": {
            context: components["schemas"]["Context"] & {
                /** @enum {unknown} */
                action: "support";
            };
            message: {
                support?: components["schemas"]["Support"];
            };
        };
        /** @description Describes the products or services offered by a BPP. This is typically sent as the response to a search intent from a BAP. The payment terms, offers and terms of fulfillment supported by the BPP can also be included here. The BPP can show hierarchical nature of products/services in its catalog using the parent_category_id in categories. The BPP can also send a ttl (time to live) in the context which is the duration for which a BAP can cache the catalog and use the cached catalog.  <br>This has properties like bbp/descriptor,bbp/categories,bbp/fulfillments,bbp/payments,bbp/offers,bbp/providers and exp<br>This is used in the following situations.<br><ul><li>This is typically used in the discovery stage when the BPP sends the details of the products and services it offers as response to a search intent from the BAP. </li></ul> */
        Catalog: {
            descriptor?: components["schemas"]["Descriptor"];
            /** @description Fulfillment modes offered at the BPP level. This is used when a BPP itself offers fulfillments on behalf of the providers it has onboarded. */
            fulfillments?: components["schemas"]["Fulfillment"][];
            /** @description Payment terms offered by the BPP for all transactions. This can be overriden at the provider level. */
            payments?: components["schemas"]["Payment"][];
            /** @description Offers at the BPP-level. This is common across all providers onboarded by the BPP. */
            offers?: components["schemas"]["Offer"][];
            providers?: components["schemas"]["Provider"][];
            /**
             * Format: date-time
             * @description Timestamp after which catalog will expire
             */
            exp?: string;
            /** @description Duration in seconds after which this catalog will expire */
            ttl?: string;
        };
        OnSearch: {
            context: components["schemas"]["Context"] & {
                /** @enum {unknown} */
                action: "on_search";
            };
            message?: {
                catalog: components["schemas"]["Catalog"];
            };
            error?: components["schemas"]["Error"];
        };
        OnSelect: {
            context: components["schemas"]["Context"] & {
                /** @enum {unknown} */
                action: "on_select";
            };
            message?: {
                order?: components["schemas"]["Order"];
            };
            error?: components["schemas"]["Error"];
        };
        OnInit: {
            context: components["schemas"]["Context"] & {
                /** @enum {unknown} */
                action: "on_init";
            };
            message?: {
                order: components["schemas"]["Order"];
            };
            error?: components["schemas"]["Error"];
        };
        OnConfirm: {
            context: components["schemas"]["Context"] & {
                /** @enum {unknown} */
                action: "on_confirm";
            };
            message?: {
                order: components["schemas"]["Order"];
            };
            error?: components["schemas"]["Error"];
        };
        /** @description Contains tracking information that can be used by the BAP to track the fulfillment of an order in real-time. which is useful for knowing the location of time sensitive deliveries. */
        Tracking: {
            /** @description A unique tracking reference number */
            id?: string;
            /**
             * Format: uri
             * @description A URL to the tracking endpoint. This can be a link to a tracking webpage, a webhook URL created by the BAP where BPP can push the tracking data, or a GET url creaed by the BPP which the BAP can poll to get the tracking data. It can also be a websocket URL where the BPP can push real-time tracking data.
             */
            url?: string;
            /** @description In case there is no real-time tracking endpoint available, this field will contain the latest location of the entity being tracked. The BPP will update this value everytime the BAP calls the track API. */
            location?: components["schemas"]["Location"];
            /**
             * @description This value indicates if the tracking is currently active or not. If this value is `active`, then the BAP can begin tracking the order. If this value is `inactive`, the tracking URL is considered to be expired and the BAP should stop tracking the order.
             * @enum {string}
             */
            status?: "active" | "inactive";
        };
        OnTrack: {
            context: components["schemas"]["Context"] & {
                /** @enum {unknown} */
                action: "on_track";
            };
            message?: {
                tracking: components["schemas"]["Tracking"];
            };
            error?: components["schemas"]["Error"];
        };
        OnCancel: {
            context: components["schemas"]["Context"] & {
                /** @enum {unknown} */
                action: "on_cancel";
            };
            message?: {
                order: components["schemas"]["Order"];
            };
            error?: components["schemas"]["Error"];
        };
        OnUpdate: {
            context: components["schemas"]["Context"] & {
                /** @enum {unknown} */
                action: "on_update";
            };
            message?: {
                order: components["schemas"]["Order"];
            };
            error?: components["schemas"]["Error"];
        };
        OnStatus: {
            context: components["schemas"]["Context"] & {
                /** @enum {unknown} */
                action: "on_status";
            };
            message?: {
                order: components["schemas"]["Order"];
            };
            error?: components["schemas"]["Error"];
        };
        OnRating: {
            context: components["schemas"]["Context"] & {
                /** @enum {unknown} */
                action: "on_rating";
            };
            message: {
                /** @description A feedback form to allow the user to provide additional information on the rating provided */
                feedback_form?: components["schemas"]["XInput"];
            };
            error?: components["schemas"]["Error"];
        };
        OnSupport: {
            context: components["schemas"]["Context"] & {
                /** @enum {unknown} */
                action: "on_support";
            };
            message?: {
                support?: components["schemas"]["Support"];
            };
            error?: components["schemas"]["Error"];
        };
        /** @description Described the industry sector or sub-sector. The network policy should contain codes for all the industry sectors supported by the network. Domains can be created in varying levels of granularity. The granularity of a domain can be decided by the participants of the network. Too broad domains will result in irrelevant search broadcast calls to BPPs that don't have services supporting the domain. Too narrow domains will result in a large number of registry entries for each BPP. It is recommended that network facilitators actively collaborate with various working groups and network participants to carefully choose domain codes keeping in mind relevance, performance, and opportunity cost. It is recommended that networks choose broad domains like mobility, logistics, healthcare etc, and progressively granularize them as and when the number of network participants for each domain grows large. */
        Domain: {
            /** @description Name of the domain */
            name?: string;
            /** @description Standard code representing the domain. The standard is usually published as part of the network policy. Furthermore, the network facilitator should also provide a mechanism to provide the supported domains of a network. */
            code?: unknown;
            /** @description A url that contains addtional information about that domain. */
            additional_info?: components["schemas"]["MediaFile"];
        };
        /** @description Describes an arbitrary region of space. The network policy should contain a published list of supported regions by the network. */
        Region: {
            /**
             * @description The number of dimensions that are used to describe any point inside that region. The most common dimensionality of a region is 2, that represents an area on a map. There are regions on the map that can be approximated to one-dimensional regions like roads, railway lines, or shipping lines. 3 dimensional regions are rarer, but are gaining popularity as flying drones are being adopted for various fulfillment services.
             * @enum {string}
             */
            dimensions?: "1" | "2" | "3";
            /** @description The type of region. This is used to specify the granularity of the region represented by this object. Various examples of two-dimensional region types are city, country, state, district, and so on. The network policy should contain a list of all possible region types supported by the network. */
            type?: string;
            /** @description Name of the region as specified on the map where that region exists. */
            name?: string;
            /** @description A standard code representing the region. This should be interpreted in the same way by all network participants. */
            code?: string;
            /** @description A string representing the boundary of the region. One-dimensional regions are represented by polylines. Two-dimensional regions are represented by polygons, and three-dimensional regions can represented by polyhedra. */
            boundary?: string;
            /** @description The url to the map of the region. This can be a globally recognized map or the one specified by the network policy. */
            map_url?: string;
        };
    };
    responses: {
        /** @description Acknowledgement of message received after successful validation of schema and signature */
        Response: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    message: {
                        ack: components["schemas"]["Ack"] & {
                            /** @enum {unknown} */
                            status?: "ACK" | "NACK";
                        };
                    };
                    error?: components["schemas"]["Error"];
                };
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
